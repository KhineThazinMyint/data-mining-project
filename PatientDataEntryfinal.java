/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dataminingproject;
import java.awt.BorderLayout;
import java.awt.Container;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import static dataminingproject.Driver.dataKey;
import weka.classifiers.trees.J48;
import weka.core.Instances;
import weka.gui.treevisualizer.PlaceNode2;
import weka.gui.treevisualizer.TreeVisualizer;

/**
 *
 * @author user
 */
public class PatientDataEntryfinal extends javax.swing.JFrame {
    
        JTable table;
     Container c;
     Connection con;
     Statement sta;
     ResultSet res;
     String url="jdbc:mysql://localhost/ucidataset?user=root&password=root";

    /**
     * Creates new form PatientDataEntry
     */
    public PatientDataEntryfinal() {
        initComponents();
             
      

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        lblAge = new javax.swing.JLabel();
        lblSex = new javax.swing.JLabel();
        lblBp = new javax.swing.JLabel();
        lblChestPain = new javax.swing.JLabel();
        lblCholesterol = new javax.swing.JLabel();
        lblEcg = new javax.swing.JLabel();
        lblHeartRate = new javax.swing.JLabel();
        lblBloodsugar = new javax.swing.JLabel();
        lblAngina = new javax.swing.JLabel();
        lblOldpeak = new javax.swing.JLabel();
        lblMajorVessels = new javax.swing.JLabel();
        lblSlope = new javax.swing.JLabel();
        lblThal = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        txtBloodPressure = new javax.swing.JTextField();
        txtCholesterol = new javax.swing.JTextField();
        txtHeartRate = new javax.swing.JTextField();
        txtOldPeak = new javax.swing.JTextField();
        txtMajorVessels = new javax.swing.JTextField();
        cboSex = new javax.swing.JComboBox();
        cboChestPain = new javax.swing.JComboBox();
        cboBloodSugar = new javax.swing.JComboBox();
        cboECG = new javax.swing.JComboBox();
        cboAngina = new javax.swing.JComboBox();
        cboSlope = new javax.swing.JComboBox();
        cboThal = new javax.swing.JComboBox();
        buttonpanel = new javax.swing.JPanel();
        pViewData = new javax.swing.JPanel();
        lbl1 = new javax.swing.JLabel();
        lbl2 = new javax.swing.JLabel();
        lbl3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblprompt = new javax.swing.JLabel();
        lbl4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnViewTree = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 102, 255));

        titlePanel.setBackground(new java.awt.Color(255, 255, 255));

        titleLabel.setBackground(new java.awt.Color(204, 204, 255));
        titleLabel.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Healthy Heart");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGap(375, 375, 375)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
        );

        mainPanel.setBackground(new java.awt.Color(204, 204, 204));
        mainPanel.setPreferredSize(new java.awt.Dimension(700, 480));

        lblAge.setBackground(new java.awt.Color(0, 0, 102));
        lblAge.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblAge.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAge.setText("Age");

        lblSex.setBackground(new java.awt.Color(0, 0, 102));
        lblSex.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSex.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSex.setText("Sex");

        lblBp.setBackground(new java.awt.Color(0, 0, 102));
        lblBp.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblBp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblBp.setText("Blood Pressure");

        lblChestPain.setBackground(new java.awt.Color(0, 0, 102));
        lblChestPain.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblChestPain.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblChestPain.setText("Chest Pain");

        lblCholesterol.setBackground(new java.awt.Color(0, 0, 102));
        lblCholesterol.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblCholesterol.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCholesterol.setText("Cholesterol");

        lblEcg.setBackground(new java.awt.Color(0, 0, 102));
        lblEcg.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblEcg.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblEcg.setText("ECG result");

        lblHeartRate.setBackground(new java.awt.Color(0, 0, 102));
        lblHeartRate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblHeartRate.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblHeartRate.setText("Heart Rate(Max)");

        lblBloodsugar.setBackground(new java.awt.Color(0, 0, 102));
        lblBloodsugar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblBloodsugar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblBloodsugar.setText("Blood sugar");

        lblAngina.setBackground(new java.awt.Color(0, 0, 102));
        lblAngina.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblAngina.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAngina.setText("Angina");

        lblOldpeak.setBackground(new java.awt.Color(0, 0, 102));
        lblOldpeak.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblOldpeak.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblOldpeak.setText("Old peak");

        lblMajorVessels.setBackground(new java.awt.Color(0, 0, 102));
        lblMajorVessels.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblMajorVessels.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMajorVessels.setText("No of major vessels");

        lblSlope.setBackground(new java.awt.Color(0, 0, 102));
        lblSlope.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSlope.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSlope.setText("Slope");

        lblThal.setBackground(new java.awt.Color(0, 0, 102));
        lblThal.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblThal.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblThal.setText("Thal");

        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        txtBloodPressure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBloodPressureActionPerformed(evt);
            }
        });

        cboSex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "male", "female" }));
        cboSex.setMinimumSize(new java.awt.Dimension(85, 20));

        cboChestPain.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "typ_angina", "asympt", "non_anginal", "atyp_angina" }));

        cboBloodSugar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "t", "f" }));

        cboECG.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "left_vent_hyper", "normal", "st_t_wave_abnormality" }));

        cboAngina.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "no", "yes" }));

        cboSlope.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "down", "flat", "up" }));

        cboThal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "fixed_defect", "normal", "reversable_defect" }));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblBp, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                            .addComponent(lblBloodsugar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblEcg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCholesterol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblChestPain, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSex, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 18, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(lblAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(76, 76, 76)))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cboECG, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cboBloodSugar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtCholesterol)
                        .addComponent(txtBloodPressure)
                        .addComponent(cboChestPain, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cboSex, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(lblHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(lblOldpeak, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtOldPeak, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(lblSlope, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboSlope, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(lblMajorVessels, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMajorVessels, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(lblAngina, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboAngina, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(lblThal, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(cboThal, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(45, 45, 45))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtAge, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtHeartRate, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(35, 35, 35)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSex, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSex, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAngina, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboAngina, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblChestPain, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboChestPain, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOldpeak, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOldPeak, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBp, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSlope, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboSlope, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtMajorVessels, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCholesterol, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMajorVessels, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblCholesterol, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBloodsugar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboBloodSugar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblThal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboThal, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEcg, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboECG, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46))
        );

        javax.swing.GroupLayout buttonpanelLayout = new javax.swing.GroupLayout(buttonpanel);
        buttonpanel.setLayout(buttonpanelLayout);
        buttonpanelLayout.setHorizontalGroup(
            buttonpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        buttonpanelLayout.setVerticalGroup(
            buttonpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 92, Short.MAX_VALUE)
        );

        pViewData.setBackground(new java.awt.Color(204, 204, 204));

        lbl1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        lbl2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        lbl3.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        lbl3.setForeground(new java.awt.Color(102, 0, 0));
        lbl3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 51));
        jLabel1.setText("Probability of No:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 51));
        jLabel2.setText("Probability of Yes:");

        lblprompt.setBackground(new java.awt.Color(153, 153, 255));
        lblprompt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblprompt.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblprompt.setBorder(javax.swing.BorderFactory.createTitledBorder("Risk Factor"));

        lbl4.setFont(new java.awt.Font("Algerian", 0, 24)); // NOI18N
        lbl4.setForeground(new java.awt.Color(102, 0, 0));
        lbl4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pViewDataLayout = new javax.swing.GroupLayout(pViewData);
        pViewData.setLayout(pViewDataLayout);
        pViewDataLayout.setHorizontalGroup(
            pViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pViewDataLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(pViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pViewDataLayout.createSequentialGroup()
                        .addGap(607, 607, 607)
                        .addComponent(lbl3, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pViewDataLayout.createSequentialGroup()
                        .addGroup(pViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(35, 35, 35)
                        .addGroup(pViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addGroup(pViewDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pViewDataLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblprompt, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbl4, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        pViewDataLayout.setVerticalGroup(
            pViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pViewDataLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pViewDataLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pViewDataLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblprompt, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(lbl3)
                .addGap(43, 43, 43))
        );

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnViewTree.setText("View Tree(J48)");
        btnViewTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTreeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titlePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnViewTree, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pViewData, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnViewTree, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5))))
                    .addComponent(pViewData, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBloodPressureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBloodPressureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBloodPressureActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        //reading missing values
          if(txtAge.getText().isEmpty()|| txtBloodPressure.getText().isEmpty() ||txtCholesterol.getText().isEmpty() || txtHeartRate.getText().isEmpty() || txtOldPeak.getText().isEmpty() || txtMajorVessels.getText().isEmpty())
            JOptionPane.showMessageDialog(null,"All data fields are required");
          
          else
          {
              DataSet dataSet=new DataSet(Data.datas.get(dataKey));
        String[] values={txtAge.getText(),cboSex.getSelectedItem().toString(),cboChestPain.getSelectedItem().toString(),
            txtBloodPressure.getText(),txtCholesterol.getText(),cboBloodSugar.getSelectedItem().toString(),
            cboECG.getSelectedItem().toString(),txtHeartRate.getText(),cboAngina.getSelectedItem().toString(),
            txtOldPeak.getText(),cboSlope.getSelectedItem().toString(),txtMajorVessels.getText(),cboThal.getSelectedItem().toString()};
        
        
              
              HashMap<String, String>instMap= new HashMap<String, String>();
                    for(int i=0; i<dataSet.getData()[0].length-1; i++) instMap.put(dataSet.getData()[0][i], values[i].trim());
                    HashMap<String, Double> condProbs=dataSet.calcCondProbs(instMap);
                    double allProbs=0.000;
                    Iterator<Double> probsIterator=condProbs.values().iterator();
                    while(probsIterator.hasNext()) allProbs +=probsIterator.next();
                    Iterator<String> keyIterator=condProbs.keySet().iterator();
                   String test = null;
                   String resulttext1=null;
                   String resulttext2=null;
                    while(keyIterator.hasNext()){
                        String next=keyIterator.next();
                        System.out.println("P(" + next +"|"+ DataSet.getInstanceStr(dataSet, instMap)+") = "+
                                String.format("%3f", condProbs.get(next))+ "/" + String.format("%3f", allProbs)+
                                " = "+ String.format("%3f", condProbs.get(next)/allProbs));      
                        test+=(String.format("%3f", condProbs.get(next)/allProbs));
                        
                       }
                    resulttext1=test.substring(4,12);
                    resulttext2=test.substring(12);
                    lbl1.setText(resulttext1+"%");
                    lbl2.setText(resulttext2+"%");
                    
                    int age=Integer.parseInt(txtAge.getText());
                    int ca=Integer.parseInt(txtMajorVessels.getText());
                    int trestbps=Integer.parseInt(txtBloodPressure.getText());
                    int chol=Integer.parseInt(txtCholesterol.getText());
                    int thalach=Integer.parseInt(txtHeartRate.getText());
                    
                    double oldpeak=Double.parseDouble(txtOldPeak.getText());
                    
                    String cp=cboChestPain.getSelectedItem().toString();
                    String restecg=cboECG.getSelectedItem().toString();
                    String exang=cboAngina.getSelectedItem().toString();
                    String slope=cboSlope.getSelectedItem().toString();
                    String thal=cboThal.getSelectedItem().toString();
                    
                    String yes="!Pay attention to your heart!";
                    String no="Healthy Heart";
                    
                    if(thal=="fixed_defect"){
                      if(ca<=0 && exang=="no"){
                          lbl4.setText(no);// rule 1
                          lblprompt.setText("");}
                          
                      if(ca<=0 && exang=="yes")//show promptttttttttttttttt
                      {lbl4.setText(yes);// rule 2 
                      lblprompt.setText("<html>thal::fixed_defect<br>ca<=0<br>exang::yes</html>");}
                      
                      if(ca>0)//show promptttttttttttttttt
                      {lbl4.setText(yes);// rule 3
                      lblprompt.setText("<html>thal::fixed_defect<br>ca>0</html>");}
                 
                    }// end fixed_defect
                    
                    if(thal=="normal"){
                        if(ca<=0){
                          lbl3.setText(no);// rule 4
                         lblprompt.setText("");}
                         
                        if(ca>0){
                            if(cp=="typ_angina" && trestbps<=138)//show promptttttttttttttttt
                            {lbl4.setText(yes);// rule 5
                            lblprompt.setText("<html>thal::normal<br>ca>0<br>cp::typ_angina<br>trestbps<=138</html>");}
                            
                            if(cp=="typ_angina" && trestbps>138){
                                 lbl4.setText(no);// rule 6
                                  lblprompt.setText("");}
                            
                            if(cp=="asympt")//show promptttttttttttttttt
                            { 
                                lbl4.setText(yes);// rule 7
                            lblprompt.setText("<html>thal::normal<br>ca>0<br>cp:::asympt</html>");
                            }
                            if(cp=="non_anginal"){
                                 lbl4.setText(no);// rule 8
                             lblprompt.setText("");}
                            
                            if(cp=="aty_angina" && restecg=="left_vent_hyper" && exang=="no")//show promptttttttttttttttt
                            { lbl4.setText(yes);// rule 9
                            lblprompt.setText("<html>thal::normal<br>ca>0<br>cp::aty_angina<br>restecg::left_vent_hyper<br>exang::no</html>");}
                            
                             if(cp=="aty_angina" && restecg=="left_vent_hyper" && exang=="yes")
                             {lbl4.setText(no);// rule 10
                                lblprompt.setText("");}
                             
                             if(cp=="aty_angina" && restecg=="normal")
                             {lbl4.setText(no);// rule 11
                              lblprompt.setText("");}
                             
                             if(cp=="aty_angina" && restecg=="st_t_wave_abnormality")
                             {lbl4.setText(no);// rule 12
                             lblprompt.setText("");}
                             
                        }
                    }//end normal
                    
                    if(thal=="reversable_defect"){
                        if(cp=="typ_angina" && chol<=229)
                        { lbl4.setText(no);// rule 13
                         lblprompt.setText("");}
                         if(cp=="typ_angina" && chol>229){
                             if(age<=48 && age>=29)//show promptttttttttttttttt
                             {lbl4.setText(yes);// rule 14
                             lblprompt.setText("<html>thal:reversable_defect<br>cp::typ_anginal<br>chol>229<br>age::between 29 and 48</html>");}
                             
                             if(age>48)
                             { lbl4.setText(no);// rule 15
                              lblprompt.setText("");}
                         }
                         if(cp=="asympt" && oldpeak>0.6)//show promptttttttttttttttt
                         {  lbl4.setText(yes);// rule 16
                         lblprompt.setText("<html>thal::reversable_defect<br>cp::asympt<br>oldpeak>0.6</html>");}
                         
                         if(cp=="asympt" && oldpeak<=0.6){
                             if(restecg=="left_vent_hyper")//show promptttttttttttttttt
                             {lbl4.setText(yes);// rule 17
                             lblprompt.setText("<html>thal::reversable_defect<br>cp::asympt<br>restecg::left_vent_hyper</html>");}
                             
                             if(restecg=="st_t_wave_abnormality")//show promptttttttttttttttt
                             {    lbl4.setText(yes);// rule 18
                             lblprompt.setText("<html>thal::reversable_defect<br>cp::asympt<br>restecg::st_t_wave_abnormality</html>");}
                             
                             if(restecg=="normal" && trestbps>136)//show promptttttttttttttttt
                             {    lbl4.setText(yes);// rule 19
                             lblprompt.setText("<html>thal::reversable_defect<br>cp::asympt<br>restecg::normal<br>trestbps>136</html>");}
                             
                             if(restecg=="normal" && trestbps<=136){
                                 if(ca<=0)
                                 { lbl4.setText(no);// rule 20
                                  lblprompt.setText("");}
                                 
                                 if(ca>0 && thalach<=151)
                                 { lbl4.setText(no);// rule 21
                                  lblprompt.setText("");}
                                 
                                 if(ca>0 && thalach>151)//show promptttttttttttttttt
                                 {lbl4.setText(yes);// rule 22  
                                 lblprompt.setText("<html>thal::reversable_defect<br>cp::asympt<br>restecg::normal<br>trestbps<=136<br>ca>0<br>thalach>151</html>");}
                             }    
                         }
                         if(cp=="non_anginal" && slope=="down")
                         { lbl4.setText(no);// rule 23
                          lblprompt.setText("");}
                         
                         if(cp=="non_anginal" && slope=="up")
                         { lbl4.setText(no);// rule 24
                          lblprompt.setText("");}
                         
                          if(cp=="non_anginal" && slope=="flat"){
                              if(ca>0)//show promptttttttttttttttt
                              { lbl4.setText(yes+"/nrule 25");// rule 25
                              lblprompt.setText("<html>thal::reversable_defect<br>cp::non_anginal<br>slope::flat<br>ca>0</html>");}
                              
                              if(ca<=0 && trestbps<=122)
                              { lbl4.setText(no);// rule 26  
                               lblprompt.setText("");}
                               if(ca<=0 && trestbps>122)//show promptttttttttttttttt
                               { lbl4.setText(yes);// rule 27  
                                lblprompt.setText("<html>thal::reversable_defect<br>cp::non_anginal<br>slope::flat<br>ca<=0<br>trestbps>122</html>");}
                          }
                          if(cp=="atyp_angina"){
                              if(ca>0)//show promptttttttttttttttt
                              {lbl4.setText(yes);// rule 28
                              lblprompt.setText("<html>thal::reversable_defect<br>cp::atyp_angina<br>ca>0</html>");}
                              
                              if(ca<=0 && oldpeak<=0.1)
                              {lbl4.setText(no);// rule 29
                               lblprompt.setText("");}
                              if(ca<=0 && oldpeak>0.1)//show promptttttttttttttttt
                              { lbl4.setText(yes);// rule 30
                              lblprompt.setText("<html>thal::reversable_defect<br>cp::atyp_angina<br>ca<=0<br>oldpeak>0.1</html>");}
                          }
                            
                    }// end reversable_defect
          }
            
       
        
                  
                    
             
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnViewTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTreeActionPerformed
        // TODO add your handling code here:
        J48 cls=new J48();
            try {
                Instances data=new Instances(new BufferedReader(new FileReader("C:\\Users\\user\\Desktop\\MasterThesis\\DataSet\\heart-c.arff")));
                data.setClassIndex(data.numAttributes()-1);
                cls.buildClassifier(data);
                final javax.swing.JFrame jf=new javax.swing.JFrame("Weka Classifier Tree Visualizer: J48");
                jf.setSize(1700,700);
                jf.getContentPane().setLayout(new BorderLayout());
                TreeVisualizer tv=new TreeVisualizer(null,cls.graph(),new PlaceNode2());
                jf.getContentPane().add(tv,BorderLayout.CENTER);
                jf.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e){
                        jf.dispose();
                    }
});
                jf.setVisible(true);
                tv.fitToScreen();
                
            } catch (IOException ex) {
                Logger.getLogger(PatientDataEntryfinal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(PatientDataEntryfinal.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_btnViewTreeActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.lang.Exception
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientDataEntryfinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientDataEntryfinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientDataEntryfinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientDataEntryfinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
  
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientDataEntryfinal().setVisible(true);
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnViewTree;
    private javax.swing.JPanel buttonpanel;
    private javax.swing.JComboBox cboAngina;
    private javax.swing.JComboBox cboBloodSugar;
    private javax.swing.JComboBox cboChestPain;
    private javax.swing.JComboBox cboECG;
    private javax.swing.JComboBox cboSex;
    private javax.swing.JComboBox cboSlope;
    private javax.swing.JComboBox cboThal;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lbl2;
    private javax.swing.JLabel lbl3;
    private javax.swing.JLabel lbl4;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblAngina;
    private javax.swing.JLabel lblBloodsugar;
    private javax.swing.JLabel lblBp;
    private javax.swing.JLabel lblChestPain;
    private javax.swing.JLabel lblCholesterol;
    private javax.swing.JLabel lblEcg;
    private javax.swing.JLabel lblHeartRate;
    private javax.swing.JLabel lblMajorVessels;
    private javax.swing.JLabel lblOldpeak;
    private javax.swing.JLabel lblSex;
    private javax.swing.JLabel lblSlope;
    private javax.swing.JLabel lblThal;
    private javax.swing.JLabel lblprompt;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel pViewData;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtCholesterol;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtMajorVessels;
    private javax.swing.JTextField txtOldPeak;
    // End of variables declaration//GEN-END:variables

    private void displayResultSet(ResultSet rs)throws SQLException//for ViewAll Button
    {
        boolean more=rs.next();
		if(!more)
		{
			JOptionPane.showMessageDialog(null, "ResultSet contain no record");
		}
		Vector cols=new Vector();
		Vector rows=new Vector();
		
		ResultSetMetaData rsmd=rs.getMetaData();
		for(int i=1;i<=rsmd.getColumnCount();i++)
		{
			cols.addElement(rsmd.getColumnName(i));
		}
		do{
			rows.addElement(getNextRow(rs,rsmd));
		}while(rs.next());
		table=new JTable(rows,cols);
		JScrollPane jsp=new JScrollPane(table);
		jsp.setBounds(10,10,500,300);
		pViewData.add(jsp); 
                                        //c.add(pViewData);
		validate();
    }

    private Vector getNextRow(ResultSet rs, ResultSetMetaData rsmd)throws SQLException
    {
        Vector tmp=new Vector();
		for(int i=1;i<=rsmd.getColumnCount();++i)
		{
			switch(rsmd.getColumnType(i))
			{
			case Types.VARCHAR:tmp.addElement(rs.getString(i));break;
			case Types.INTEGER:tmp.addElement(new Long(rs.getLong(i)));break;
			case Types.DOUBLE:tmp.addElement(new Double(rs.getDouble(i)));break;
			case Types.DECIMAL:tmp.addElement(new Long(rs.getInt(i)));break;
			default:JOptionPane.showMessageDialog(null, "Type was"+rsmd.getColumnTypeName(i));
			}
		}
		return tmp;
    }

    private int executeQuery(String q) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
